pipeline {
    agent { 
        node {
            label 'agent1'
        }
    }
    stages {
        
        stage('Install Dependencies ') {
            steps {
                echo "Installing Dependencies.."
                sh '''
                apt-get update && apt-get install -y python3.11-venv
                apt-get install -y ca-certificates curl
                install -m 0755 -d /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
                chmod a+r /etc/apt/keyrings/docker.asc
                echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
                $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                tee /etc/apt/sources.list.d/docker.list > /dev/null
                apt-get update
                apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                apt-get install -y ffmpeg libsm6 libxext6  -y
                python3 -m venv env
                . env/bin/activate
                pip install --upgrade pip
                pip install flask werkzeug ultralytics Pillow
                pip install -r requirements.txt
                deactivate
                '''
            }
        }
        stage('Data Processing') {
            steps {
                echo "Data Processing.."
                sh '''
                chmod -R 777 .
                . env/bin/activate
                python datproc.py
                deactivate
                '''
            }
        }
        stage('Training') {
            steps {
                echo "Training.."
                sh '''
                chmod -R 777 .
                . env/bin/activate
                python training.py
                deactivate
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                echo "Building Docker Image.."
                withCredentials([usernamePassword(credentialsId: '6df84f71-e1b2-4b41-9ce4-4b2ff745ee09', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh'''
                    echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                    chmod -R 777 .
                    . env/bin/activate
                    docker run -d --name temp-container arminfal/onlab:latest
                    docker cp . temp-container:/app
                    docker exec temp-container bash -c "
                        apt-get update && apt-get install -y python3.11-venv &&
                        apt-get install -y ca-certificates curl &&
                        install -m 0755 -d /etc/apt/keyrings &&
                        curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc &&
                        chmod a+r /etc/apt/keyrings/docker.asc &&
                        echo \
                        'deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
                        $(. /etc/os-release && echo "$VERSION_CODENAME") stable' | \
                        tee /etc/apt/sources.list.d/docker.list > /dev/null &&
                        apt-get update &&
                        apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &&
                        apt-get install -y ffmpeg libsm6 libxext6  -y &&
                        python3 -m venv env &&
                        . env/bin/activate &&
                        pip install --upgrade pip &&
                        pip install flask werkzeug ultralytics Pillow &&
                        pip install -r /app/requirements.txt
                    "
                    docker commit -c 'CMD ["python", "/app/predict.py"]' temp-container arminfal/onlab:predict
                    docker stop temp-container
                    docker rm temp-container
                    deactivate
                    '''
                }
            }
        }
        stage('Deploy Docker Image') {
            steps {
                echo "Deploying Docker Image.."
                withCredentials([usernamePassword(credentialsId: '6df84f71-e1b2-4b41-9ce4-4b2ff745ee09', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                    chmod -R 777 .
                    docker tag arminfal/onlab:predict arminfal/onlab:predict
                    #docker push arminfal/onlab:predict
                    '''
                }
            }
        }
        stage('Start Docker Container') {
            steps {
                echo "Running Docker Container.."
                sh '''
                chmod -R 777 .
                #docker pull arminfal/onlab:predict
                docker run -d -p 8081:8081 arminfal/onlab:predict
                '''
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'runs/**', fingerprint: true
        }
    }
}