pipeline {
    agent { 
        node {
            label 'agent1'
        }
    }
    stages {
        
        stage('Install Dependencies') {
            steps {
                echo "Installing Dependencies.."
                sh ''' 
                apt-get update && apt-get install -y python3.11-venv
                apt-get install ffmpeg libsm6 libxext6  -y
                python3 -m venv env
                . env/bin/activate
                pip install --upgrade 
                pip install flask

                pip install -r requirements.txt
                deactivate
                '''
            }
        }
        stage('Data Processing') {
            steps {
                echo "Data Processing.."
                sh '''
                chmod -R 777 .
                . env/bin/activate
                python datproc.py
                deactivate
                '''
            }
        }
        stage('Training') {
            steps {
                echo "Training.."
                sh '''
                chmod -R 777 .
                . env/bin/activate
                python training.py
                deactivate
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                echo "Building Docker Image.."
                sh '''
                docker build -t arminfal/onlab:predict .
                '''
            }
        }
        stage('Deploy Docker Image') {
            steps {
                echo "Deploying Docker Image.."
                sh '''
                docker tag arminfal/onlab:predict arminfal/onlab:predict
                docker push arminfal/onlab:predict
                '''
            }
        }
        stage('Start Docker Container') {
            steps {
                echo "Running Docker Container.."
                sh '''
                docker pull arminfal/onlab:predict
                docker run -d -p 8081:8081 arminfal/onlab:predict
                '''
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'runs/**', fingerprint: true
        }
    }
}